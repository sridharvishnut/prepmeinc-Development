// src/components/student-dashboard/SubjectMaterialBrowser.tsx

"use client";

import React, { useState, useEffect, useCallback } from 'react';
import { Subject, SubjectMaterial } from '@/types/manage-organizations';

interface SubjectMaterialBrowserProps {
  studentId: string; // Current student's ID
  schoolId: string; // Current student's school ID
  isCustomTestFeatureEnabled: boolean; // Flag from parent (Feature Management System)
}

/**
 * Feature ID: MO-055-FE
 * Feature Name: Frontend Component - Subject Material Browser for Students
 * What it does: Allows students to browse subjects and their materials, view content, and (conditionally) generate tests.
 * Description: Fetches subjects for the student's school and materials for a selected subject. It displays buttons for "View content" and, if enabled by feature flag, "Generate Test" (from document or generated by AI), and a placeholder for "Choose from folders to upload".
 * Current Module Implemented: src/components/student-dashboard
 * Module to be implemented: Actual file upload, AI test generation integration, Test taking UI.
 */
const SubjectMaterialBrowser: React.FC<SubjectMaterialBrowserProps> = ({
  studentId, // Marked as unused in build output, but logically part of props
  schoolId,
  isCustomTestFeatureEnabled,
}) => {
  const [subjects, setSubjects] = useState<Subject[]>([]);
  const [selectedSubjectId, setSelectedSubjectId] = useState<string | null>(null);
  const [materials, setMaterials] = useState<SubjectMaterial[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  // Fetch Subjects for the student's school
  useEffect(() => {
    const fetchSubjects = async () => {
      if (!schoolId) return;
      setLoading(true);
      setError(null);
      try {
        const response = await fetch(`/api/manage-organizations/subjects?schoolId=${schoolId}`);
        if (response.ok) {
          const data = await response.json();
          setSubjects(data.subjects);
        } else {
          const errorData = await response.json();
          throw new Error(errorData.message || 'Failed to fetch subjects');
        }
      } catch (err: unknown) {
        const errorMessage = err instanceof Error ? err.message : 'An error occurred while fetching subjects.';
        setError(errorMessage);
      } finally {
        setLoading(false);
      }
    };
    fetchSubjects();
  }, [schoolId]);

  // Fetch Materials when a subject is selected
  const fetchMaterials = useCallback(async () => {
    if (!selectedSubjectId) {
      setMaterials([]);
      return;
    }
    setLoading(true);
    setError(null);
    try {
      const response = await fetch(`/api/manage-organizations/subject-materials?subjectId=${selectedSubjectId}`);
      if (response.ok) {
        const data = await response.json();
        setMaterials(data.materials);
      } else {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to fetch subject materials');
      }
    } catch (err: unknown) {
      const errorMessage = err instanceof Error ? err.message : 'An error occurred while fetching subject materials.';
      setError(errorMessage);
      setMaterials([]);
    } finally {
      setLoading(false);
    }
  }, [selectedSubjectId]);

  useEffect(() => {
    fetchMaterials();
  }, [fetchMaterials]);

  const handleViewContent = (fileUrl: string) => {
    window.open(fileUrl, '_blank');
    console.log('Student viewing content:', fileUrl);
  };

  const handleGenerateTest = (materialId: string, type: 'from_document' | 'ai_generated') => { // handleGenerateTest is unused, but kept for future implementation
    alert(`Generate Test (${type.replace('_', ' ')}) for Material ID: ${materialId} (Functionality coming soon!)`);
    console.log(`Student generating test of type ${type} for material:`, materialId);
    // This would trigger an API call to initiate test generation
  };

  const handleUploadFromFolders = () => {
    alert('Choose from folders to upload document (Coming Soon!) For personalized test generation.');
    console.log('Student attempting to upload from folders.');
  };

  if (loading) {
    return <div className="bg-white p-6 rounded-lg shadow">Loading subjects and materials...</div>;
  }

  if (error) {
    return <div className="bg-white p-6 rounded-lg shadow text-red-500">Error: {error}</div>;
  }

  return (
    <div className="bg-white p-6 rounded-lg shadow">
      <h2 className="text-2xl font-semibold mb-4">My Subjects & Materials</h2>

      <div className="mb-6">
        <label htmlFor="subjectSelect" className="block text-sm font-medium text-gray-700">Select Subject:</label>
        <select
          id="subjectSelect"
          value={selectedSubjectId || ''}
          onChange={(e) => setSelectedSubjectId(e.target.value || null)}
          className="mt-1 block w-full md:w-1/2 lg:w-1/3 border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        >
          <option value="">Select a Subject</option>
          {subjects.map((subject) => (
            <option key={subject.id} value={subject.id}>{subject.name}</option>
          ))}
        </select>
      </div>

      {selectedSubjectId ? (
        <div className="mt-4">
          <h3 className="text-xl font-semibold mb-3">Materials for {subjects.find(s => s.id === selectedSubjectId)?.name}</h3>
          {materials.length === 0 ? (
            <p className="text-gray-600">No materials available for this subject yet.</p>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Title</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">File Name</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {materials.map((material) => (
                    <tr key={material.id}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{material.title}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{material.fileName}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button
                          onClick={() => handleViewContent(material.fileUrl)}
                          className="text-indigo-600 hover:text-indigo-900 mr-2"
                        >
                          View Content
                        </button>
                        <div className="relative inline-block text-left">
                          <button
                            type="button"
                            onClick={() => { /* Toggle dropdown for test generation */ alert('Generate Test Options (Coming Soon)'); } }
                            className="inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                            id="menu-button" aria-expanded="true" aria-haspopup="true"
                          >
                            Generate Test
                            <svg className="-mr-1 ml-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                              <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                            </svg>
                          </button>
                          {/* This is where the dropdown options would appear */}
                          {/* Example dropdown structure (would be state-controlled visibility)
                          <div className="origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none" role="menu" aria-orientation="vertical" aria-labelledby="menu-button" tabIndex={-1}>
                            <div className="py-1" role="none">
                              <button onClick={() => handleGenerateTest(material.id, 'from_document')} className="text-gray-700 block px-4 py-2 text-sm" role="menuitem" tabIndex={-1} id="menu-item-0">Questions from Document (AI Extract)</button>
                              <button onClick={() => handleGenerateTest(material.id, 'ai_generated')} className="text-gray-700 block px-4 py-2 text-sm" role="menuitem" tabIndex={-1} id="menu-item-1">Generate Questions based on Content (AI)</button>
                            </div>
                          </div>
                          */}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      ) : (
        <p className="text-gray-600">Please select a subject to view its materials.</p>
      )}

      <div className="mt-8 p-6 border-t border-gray-200">
        <h3 className="text-xl font-semibold mb-4">Personalized Learning Tools</h3>
        {isCustomTestFeatureEnabled ? (
          <div className="bg-blue-50 border-l-4 border-blue-400 p-4">
            <p className="font-bold text-blue-800 mb-2">'Choose from folders to upload and take tests' feature is ENABLED for your school!</p>
            <button
              onClick={handleUploadFromFolders}
              className="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Choose from folders to upload and take tests (Coming Soon)
            </button>
            <p className="text-sm text-blue-700 mt-2">Upload your own study documents and generate personalized tests!</p>
          </div>
        ) : (
          <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4">
            <p className="font-bold text-yellow-800 mb-2">'Choose from folders to upload and take tests' feature is currently DISABLED for your school.</p>
            <p className="text-sm text-yellow-700">Contact your school administrator or check pricing plans for access.</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default SubjectMaterialBrowser;
